---
title: "Benchmarks"
output: 
  rmarkdown::html_vignette:
    toc: true
    toc_depth: 3
vignette: >
  %\VignetteIndexEntry{Benchmarks}
  %\VignetteEncoding{UTF-8}
  %\VignetteEngine{knitr::rmarkdown}
editor_options: 
  chunk_output_type: console
---

```{r setup, include = FALSE, results = 'markup'}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#",
  fig.width = 7.5,
  fig.height = 5.5,
  dpi = 100
)
```

One of the most important features of this package is the complete microbial taxonomic database, supplied by the [Catalogue of Life](http://www.catalogueoflife.org) (CoL) and the [List of Prokaryotic names with Standing in Nomenclature](https://lpsn.dsmz.de) (LPSN). We created a function `as.mo()` that transforms any user input value to a valid microbial ID by using intelligent rules combined with the microbial taxonomy.

Using the `microbenchmark` package, we can review the calculation performance of this function. Its function `microbenchmark()` runs different input expressions independently of each other and measures their time-to-result.

```{r, message = FALSE, echo = FALSE}
library(ggplot2)
ggplot.bm <- function(df) {
  reorder <- function(.f, .x, .fun, .desc = TRUE) {
    summ <- tapply(.x, .f, .fun)
    factor(.f, levels = names(summ)[order(summ, decreasing = .desc)], ordered = is.ordered(.f))
  }
  ggplot(df,
         aes(x = reorder(expr, time, median), y = time / 1000 / 1000)) + 
  stat_boxplot(geom = "errorbar", width = 0.5) +
  geom_boxplot(outlier.alpha = 0) +
  coord_flip() +
  scale_y_continuous(trans = "log", breaks = c(1, 2, 5, 
                                                10, 20, 50,
                                                100, 200, 500,
                                                1000, 2000, 5000)) +
  labs(x = "Expression",
       y = "Time in milliseconds (log scale)") +
  theme_minimal() +
  theme(axis.text.y = element_text(family = "mono"))
}
```

```{r, message = FALSE}
library(microbenchmark)
library(AMR)
library(dplyr)
```

In the next test, we try to 'coerce' different input values into the microbial code of *Staphylococcus aureus*. Coercion is a computational process of forcing output based on an input. For microorganism names, coercing user input to taxonomically valid microorganism names is crucial to ensure correct interpretation and to enable grouping based on taxonomic properties. 

The actual result is the same every time: it returns its microorganism code ``r as.character(as.mo("Staphylococcus aureus"))`` (*B* stands for *Bacteria*, its taxonomic kingdom). 

But the calculation time differs a lot:

```{r, warning=FALSE, message=FALSE}
S.aureus <- microbenchmark(
  as.mo("sau"), # WHONET code
  as.mo("stau"),
  as.mo("STAU"),
  as.mo("staaur"),
  as.mo("STAAUR"),
  as.mo("S. aureus"),
  as.mo("S aureus"),
  as.mo("Staphylococcus aureus"), # official taxonomic name
  as.mo("Staphylococcus aureus (MRSA)"), # additional text
  as.mo("Sthafilokkockus aaureuz"), # incorrect spelling
  as.mo("MRSA"), # Methicillin Resistant S. aureus
  as.mo("VISA"), # Vancomycin Intermediate S. aureus
  times = 25)
print(S.aureus, unit = "ms", signif = 2)
```
```{r, echo = FALSE}
mult_factor <- median(S.aureus[S.aureus$expr == S.aureus[which(S.aureus$time == max(S.aureus$time)), "expr"], "time"]) / median(S.aureus[S.aureus$expr == S.aureus[which(S.aureus$time == min(S.aureus$time)), "expr"], "time"])
ggplot.bm(S.aureus)
```

In the table above, all measurements are shown in milliseconds (thousands of seconds). A value of 5 milliseconds means it can determine 200 input values per second. It case of 200 milliseconds, this is only 5 input values per second. It is clear that accepted taxonomic names are extremely fast, but some variations are up to `r ceiling(mult_factor)` times slower to determine.

To improve performance, we implemented two important algorithms to save unnecessary calculations: **repetitive results** and **already precalculated results**.

### Repetitive results

Repetitive results are values that are present more than once in a vector. Unique values will only be calculated once by `as.mo()`. So running `as.mo(c("E. coli", "E. coli"))` will check the value `"E. coli"` only once.

To prove this, we will use `mo_name()` for testing - a helper function that returns the full microbial name (genus, species and possibly subspecies) which uses `as.mo()` internally.

```{r, message = FALSE}
# start with the example_isolates data set
x <- example_isolates %>% 
  # take all MO codes from the 'mo' column
  pull(mo) %>%
  # and copy them a thousand times
  rep(1000) %>%
  # then scramble them
  sample()

# what do these values look like? They are of class <mo>:
head(x)
  
# as the example_isolates data set has 2,000 rows, we should have 2 million items
length(x)

# and how many unique values do we have?
n_distinct(x)

# now let's see:
run_it <- microbenchmark(mo_name(x),
                         times = 10)
print(run_it, unit = "ms", signif = 3)
```

So getting official taxonomic names of `r format(length(x), big.mark = ",")` (!!) items consisting of `r n_distinct(x)` unique values only takes `r round(median(run_it$time, na.rm = TRUE) / 1e9, 3)` seconds. That is `r round(median(run_it$time, na.rm = TRUE) / length(x), 0)` nanoseconds on average. You only lose time on your unique input values.

### Precalculated results

What about precalculated results? If the input is an already precalculated result of a helper function such as `mo_name()`, it almost doesn't take any time at all. In other words, if you run `mo_name()` on a valid taxonomic name, it will return the results immediately (see 'C' below):

```{r, warning=FALSE, message=FALSE}
run_it <- microbenchmark(A = mo_name("STAAUR"),
                         B = mo_name("S. aureus"),
                         C = mo_name("Staphylococcus aureus"),
                         times = 10)
print(run_it, unit = "ms", signif = 3)
```

So going from `mo_name("Staphylococcus aureus")` to `"Staphylococcus aureus"` takes `r format(round(run_it %>% filter(expr == "C") %>% pull(time) %>% median() / 1e9, 4), scientific = FALSE)` seconds - it doesn't even start calculating *if the result would be the same as the expected resulting value*. That goes for all helper functions:

```{r}
run_it <- microbenchmark(A = mo_species("aureus"),
                         B = mo_genus("Staphylococcus"),
                         C = mo_name("Staphylococcus aureus"),
                         D = mo_family("Staphylococcaceae"),
                         E = mo_order("Bacillales"),
                         F = mo_class("Bacilli"),
                         G = mo_phylum("Firmicutes"),
                         H = mo_kingdom("Bacteria"),
                         times = 10)
print(run_it, unit = "ms", signif = 3)
```

Of course, when running `mo_phylum("Firmicutes")` the function has zero knowledge about the actual microorganism, namely *S. aureus*. But since the result would be `"Firmicutes"` anyway, there is no point in calculating the result. And because this package contains all phyla of all known bacteria, it can just return the initial value immediately.

### Results in other languages

When the system language is non-English and supported by this `AMR` package, some functions will have a translated result. This almost does't take extra time (compare "en" from the table below with the other languages):

```{r}
CoNS <- as.mo("CoNS")
CoNS

mo_name(CoNS, language = "en") # or just mo_name(CoNS) on an English system

mo_name(CoNS, language = "es") # or just mo_name(CoNS) on a Spanish system

mo_name(CoNS, language = "nl") # or just mo_name(CoNS) on a Dutch system

run_it <- microbenchmark(da = mo_name(CoNS, language = "da"),
                         de = mo_name(CoNS, language = "de"),
                         en = mo_name(CoNS, language = "en"),
                         es = mo_name(CoNS, language = "es"),
                         fr = mo_name(CoNS, language = "fr"),
                         it = mo_name(CoNS, language = "it"),
                         nl = mo_name(CoNS, language = "nl"),
                         pt = mo_name(CoNS, language = "pt"),
                         ru = mo_name(CoNS, language = "ru"),
                         sv = mo_name(CoNS, language = "sv"),
                         times = 100)
print(run_it, unit = "ms", signif = 4)
```

Currently supported languages are `r AMR:::vector_and(names(AMR:::LANGUAGES_SUPPORTED), quotes = FALSE)`.
